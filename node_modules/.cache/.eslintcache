[{"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/index.js":"1","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/App.js":"2","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/Header.js":"3","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/TaskList.js":"4","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/TaskItem.js":"5","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/CreateTask.js":"6","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/DeleteTask.js":"7"},{"size":211,"mtime":1650954810307,"results":"8","hashOfConfig":"9"},{"size":221,"mtime":1651139657099,"results":"10","hashOfConfig":"9"},{"size":111,"mtime":1650956457337,"results":"11","hashOfConfig":"9"},{"size":970,"mtime":1651142399811,"results":"12","hashOfConfig":"9"},{"size":1414,"mtime":1651142417868,"results":"13","hashOfConfig":"9"},{"size":1295,"mtime":1651142280225,"results":"14","hashOfConfig":"9"},{"size":123,"mtime":1651142356094,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wen6v6",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/index.js",[],[],"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/App.js",[],[],[],"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/Header.js",[],[],[],"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/TaskList.js",["42","43","44"],[],"import React, {useEffect, useState} from 'react';\nimport TaskItem from './TaskItem';\nimport CreateTask from './CreateTask';\n\nconst TaskList = () => {\n  const[todoList, setTodoList] = useState([]);\n  const[updateDom, setUpdateDom] = useState(); //ask if better way\n  let updates=0;\n\n  useEffect(() =>{\n    fetch('http://localhost:3000/list')\n      .then(res => res.json())\n      .then(data => setTodoList(data))\n  }, []);\n\n  const displayTodo = todoList.map((todo) =>{\n    return <TaskItem key={todo.id} todo={todo}/>\n  })\n\n  return (\n    <div>\n      <table className=\"task-table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Task</th>\n            <th scope=\"col\">Due Date</th>\n            <th scope=\"col\">Complete</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            displayTodo\n          }\n        </tbody>\n      </table>\n      <CreateTask todoList={todoList} setTodoList={setTodoList}/>\n    </div>\n  )\n}\n\nexport default TaskList","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/TaskItem.js",["45","46","47"],[],"import React, { useState } from 'react'\nimport DeleteTask from './DeleteTask';\n\nconst TaskItem = ({todo}) => {\n  const [taskComplete, setTaskComplete] = useState();\n  const {tasks, due, complete} = todo; //deconstructs task\n\n  function handleClick(){\n    if(todo.complete == false){\n      todo.complete = true;\n    }\n    else{\n      todo.complete = false;\n    }\n    updateTask();\n    setTaskComplete(todo.complete) //updates dom for if complete or not\n  }\n\n  function updateTask(){\n    console.log(todo)\n    let id = todo.id\n    fetch(`http://localhost:3000/list/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(todo),\n      })\n      .then(res => res.json())\n  }\n\n  return (\n    <tr>\n      <td id=\"task\" className={todo.complete ? \"strike\" : \"\"}>{tasks}</td>\n      <td id=\"due\" className={todo.complete ? \"strike\" : \"\"}>{due}</td>\n      <td>\n        <input id=\"completeCheck\" type=\"checkbox\" onChange={handleClick} defaultChecked={complete}/> {/* defaultChecked keeps marked when refreshed*/}\n      </td>\n      <td>\n        <button className=\"btn btn-delete\">\n          <span className=\"mdi mdi-delete mdi-24px\"></span>\n          <span className=\"mdi mdi-delete-empty mdi-24px\"></span>\n          <span>Delete</span>\n        </button>\n      </td>\n    </tr>\n  )\n}\n\nexport default TaskItem","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/CreateTask.js",["48"],[],"import React, {useState} from 'react'\n\nconst CreateTask = ({todoList, setTodoList}) => {\n    const [addTodo, setAddTodo] = useState({\n        id: \"\",\n        tasks: \"\",\n        due: \"\",\n        complete: false\n    });\n    let newTodoList = [...todoList]\n\n    const handleChange = (event) => {\n        setAddTodo({ ...addTodo, [event.target.name]: event.target.value });\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if(addTodo.tasks === \"\"){\n        return console.log(\"Please add a task\")\n        };\n        if( addTodo.due === \"\"){\n            return console.log(\"Please add a due date\")\n        }\n        console.log(addTodo);\n\n        fetch(\"http://localhost:3000/list\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(addTodo),\n        })\n        .then(res => res.json())\n    }\n\n  return (\n    <form id=\"formStyle\" onSubmit={handleSubmit}>\n        {/* create an input element */}\n          <input type=\"text\" name=\"tasks\" placeholder=\"task to add\" onChange={handleChange}/>\n          <input type=\"text\" name=\"due\" placeholder=\"due date of task\" onChange={handleChange}/>\n          <button id='add-button'>Add Task</button>\n    </form>\n  )\n}\n\nexport default CreateTask","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/DeleteTask.js",[],[],{"ruleId":"49","severity":1,"message":"50","line":7,"column":9,"nodeType":"51","messageId":"52","endLine":7,"endColumn":18},{"ruleId":"49","severity":1,"message":"53","line":7,"column":20,"nodeType":"51","messageId":"52","endLine":7,"endColumn":32},{"ruleId":"49","severity":1,"message":"54","line":8,"column":7,"nodeType":"51","messageId":"52","endLine":8,"endColumn":14},{"ruleId":"49","severity":1,"message":"55","line":2,"column":8,"nodeType":"51","messageId":"52","endLine":2,"endColumn":18},{"ruleId":"49","severity":1,"message":"56","line":5,"column":10,"nodeType":"51","messageId":"52","endLine":5,"endColumn":22},{"ruleId":"57","severity":1,"message":"58","line":9,"column":22,"nodeType":"59","messageId":"60","endLine":9,"endColumn":24},{"ruleId":"49","severity":1,"message":"61","line":10,"column":9,"nodeType":"51","messageId":"52","endLine":10,"endColumn":20},"no-unused-vars","'updateDom' is assigned a value but never used.","Identifier","unusedVar","'setUpdateDom' is assigned a value but never used.","'updates' is assigned a value but never used.","'DeleteTask' is defined but never used.","'taskComplete' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'newTodoList' is assigned a value but never used."]