[{"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/index.js":"1","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/App.js":"2","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/Header.js":"3","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/TaskList.js":"4","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/TaskItem.js":"5","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/CreateTask.js":"6","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/DeleteTask.js":"7"},{"size":211,"mtime":1650954810307,"results":"8","hashOfConfig":"9"},{"size":221,"mtime":1651139657099,"results":"10","hashOfConfig":"9"},{"size":116,"mtime":1651372422945,"results":"11","hashOfConfig":"9"},{"size":932,"mtime":1651389345771,"results":"12","hashOfConfig":"9"},{"size":1397,"mtime":1651392094050,"results":"13","hashOfConfig":"9"},{"size":1718,"mtime":1651391689002,"results":"14","hashOfConfig":"9"},{"size":524,"mtime":1651392319439,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wen6v6",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/index.js",[],[],"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/App.js",[],[],[],"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/Header.js",[],[],"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/TaskList.js",[],[],[],"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/TaskItem.js",["40","41"],[],"import React, { useState } from 'react'\nimport DeleteTask from './DeleteTask';\n\nconst TaskItem = ({todo, todoList, setTodoList}) => {\n  const [taskComplete, setTaskComplete] = useState();\n  const {tasks, due, complete} = todo; //deconstructs task\n\n  function handleClick(){\n    if(todo.complete == false){\n      todo.complete = true;\n    }\n    else{\n      todo.complete = false;\n    }\n    updateTask();\n    setTaskComplete(todo.complete) //updates dom for if complete or not\n  }\n\n  function updateTask(){\n    console.log(todo.complete ? \"Complete\" : \"Incomplete\", todo)\n    let id = todo.id\n    fetch(`http://localhost:3000/list/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(todo),\n      })\n      .then(res => res.json())\n  }\n\n  return (\n    <tr className={todo.complete ? \"strike\" : \"\"}>{/* if the task is complete put classname as strike, if its not complete have no class name */}\n      <td id=\"task\">{tasks}</td>\n      <td id=\"due\">{due}</td>\n      <td>\n        <input id=\"completeCheck\" type=\"checkbox\" onChange={handleClick} defaultChecked={complete}/> {/* defaultChecked keeps marked when refreshed*/}\n      </td>\n      <td>\n          <DeleteTask todo={todo} todoList={todoList} setTodoList={setTodoList}/>\n      </td>\n    </tr>\n  )\n}\n\nexport default TaskItem","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/CreateTask.js",["42","43"],[],"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/DeleteTask.js",[],[],{"ruleId":"44","severity":1,"message":"45","line":5,"column":10,"nodeType":"46","messageId":"47","endLine":5,"endColumn":22},{"ruleId":"48","severity":1,"message":"49","line":9,"column":22,"nodeType":"50","messageId":"51","endLine":9,"endColumn":24},{"ruleId":"44","severity":1,"message":"52","line":4,"column":12,"nodeType":"46","messageId":"47","endLine":4,"endColumn":20},{"ruleId":"44","severity":1,"message":"53","line":4,"column":22,"nodeType":"46","messageId":"47","endLine":4,"endColumn":33},"no-unused-vars","'taskComplete' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'newAdded' is assigned a value but never used.","'setNewAdded' is assigned a value but never used."]