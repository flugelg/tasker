[{"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/index.js":"1","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/App.js":"2","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/Header.js":"3","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/TaskList.js":"4","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/TaskItem.js":"5","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/CreateTask.js":"6","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/DeleteTask.js":"7"},{"size":306,"mtime":1651555078038,"results":"8","hashOfConfig":"9"},{"size":355,"mtime":1651556338478,"results":"10","hashOfConfig":"9"},{"size":116,"mtime":1651372422945,"results":"11","hashOfConfig":"9"},{"size":932,"mtime":1651389345771,"results":"12","hashOfConfig":"9"},{"size":1402,"mtime":1651417227191,"results":"13","hashOfConfig":"9"},{"size":1718,"mtime":1651391689002,"results":"14","hashOfConfig":"9"},{"size":524,"mtime":1651392319439,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1wen6v6",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"19"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"19"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/index.js",[],[],[],"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/App.js",["41"],[],"import './App.css';\nimport { Route, Switch } from \"react-router-dom\";\nimport Header from './components/Header';\nimport TaskList from './components/TaskList';\n\nfunction App() {\n  return (\n    <div>\n      <Route path=\"/head\">\n        <Header/>\n      </Route>\n      <Route path=\"/\">\n        <TaskList/>\n      </Route>\n    </div>\n\n  );\n}\n\nexport default App;\n","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/Header.js",[],[],"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/TaskList.js",[],[],"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/TaskItem.js",["42","43"],[],"import React, { useState } from 'react'\nimport DeleteTask from './DeleteTask';\n\nconst TaskItem = ({todo, todoList, setTodoList}) => {\n  const [taskComplete, setTaskComplete] = useState();\n  const {tasks, due, complete} = todo; //deconstructs task\n\n  function handleClick(){\n    if(todo.complete == false){\n      todo.complete = true;\n    }\n    else{\n      todo.complete = false;\n    }\n    updateTask();\n    setTaskComplete(todo.complete) //updates dom for if complete or not\n  }\n\n  function updateTask(){\n    console.log(todo.complete ? \"Complete\" : \"Incomplete\", todo)\n    \n    let id = todo.id\n    fetch(`http://localhost:3000/list/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(todo),\n      })\n      .then(res => res.json())\n  }\n\n  return (\n    <tr className={todo.complete ? \"strike\" : \"\"}>{/* if the task is complete put classname as strike, if its not complete have no class name */}\n      <td id=\"task\">{tasks}</td>\n      <td id=\"due\">{due}</td>\n      <td>\n        <input id=\"completeCheck\" type=\"checkbox\" onChange={handleClick} defaultChecked={complete}/> {/* defaultChecked keeps marked when refreshed*/}\n      </td>\n      <td>\n          <DeleteTask todo={todo} todoList={todoList} setTodoList={setTodoList}/>\n      </td>\n    </tr>\n  )\n}\n\nexport default TaskItem","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/CreateTask.js",["44","45"],[],"import React, {useState} from 'react'\n\nconst CreateTask = ({updateTasks, setTodoList, todoList}) => {\n    const [newAdded, setNewAdded] = useState({})\n    const [addTodo, setAddTodo] = useState({\n        id: \"\",\n        tasks: \"\",\n        due: \"\",\n        complete: false\n    });\n\n    const handleChange = (event) => {\n        setAddTodo({ ...addTodo, [event.target.name]: event.target.value });\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if(addTodo.tasks === \"\"){\n        return console.log(\"Please add a task\")\n        };\n        if( addTodo.due === \"\"){\n            return console.log(\"Please add a due date\")\n        }\n\n        fetch(\"http://localhost:3000/list\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(addTodo),\n        })\n        .then(res => res.json())\n        .then(data => setTodoList([...todoList, data]))\n        .then(setAddTodo({ //clearing input elements\n            id: \"\",\n            tasks: \"\",\n            due: \"\",\n            complete: false\n            }))\n        console.log(\"Added\", addTodo)\n        document.getElementById(\"tasks-input\").focus(); //focusing on input elements after re-render \n    }\n\n  return (\n    <form id=\"formStyle\" onSubmit={handleSubmit}>\n        {/* create an input element */}\n          <input  id=\"tasks-input\" type=\"text\" name=\"tasks\" placeholder=\"task to add\" value={addTodo.tasks} onChange={handleChange} autoFocus/>\n          <input type=\"text\" name=\"due\" placeholder=\"due date of task\" value={addTodo.due} onChange={handleChange}/>\n          <button id='add-button'>Add Task</button>\n    </form>\n  )\n}\n\nexport default CreateTask","/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/DeleteTask.js",[],[],{"ruleId":"46","severity":1,"message":"47","line":2,"column":17,"nodeType":"48","messageId":"49","endLine":2,"endColumn":23},{"ruleId":"46","severity":1,"message":"50","line":5,"column":10,"nodeType":"48","messageId":"49","endLine":5,"endColumn":22},{"ruleId":"51","severity":1,"message":"52","line":9,"column":22,"nodeType":"53","messageId":"54","endLine":9,"endColumn":24},{"ruleId":"46","severity":1,"message":"55","line":4,"column":12,"nodeType":"48","messageId":"49","endLine":4,"endColumn":20},{"ruleId":"46","severity":1,"message":"56","line":4,"column":22,"nodeType":"48","messageId":"49","endLine":4,"endColumn":33},"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'taskComplete' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'newAdded' is assigned a value but never used.","'setNewAdded' is assigned a value but never used."]