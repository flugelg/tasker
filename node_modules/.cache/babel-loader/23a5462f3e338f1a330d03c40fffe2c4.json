{"ast":null,"code":"var _jsxFileName = \"/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/TaskList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport TaskItem from './TaskItem';\nimport CreateTask from './CreateTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskList = () => {\n  _s();\n\n  const [todoList, setTodoList] = useState([]); //whatever argument is in useState() is the initial state. Initial state only used on first render\n  //states variable is todoList and setter function is setTodoList. Whatever value is passed into setTodoList cahnges the todoList varible to it.\n\n  useEffect(() => {\n    //useEffect adds ability to perform side effects. side effect is any other effect from an action we take.\n    fetch('http://localhost:3000/list').then(res => res.json()) //parsing from json to js object\n    .then(data => setTodoList(data)); //using the parsed data and setting the state of todoList\n  }, []); //dependancy is [], whatever is inside the useEffect is dependent on that. so if the rependency chances the useEffect function will run. So its a side effect of changing that dependency\n\n  const handleDelete = e => {\n    console.log(\"Deleted\", e);\n    setTodoList(todoList.filter(task => task !== e));\n  };\n\n  const handleCreateTask = newTask => {\n    console.log(\"Added\", newTask);\n    setTodoList([...todoList, newTask]);\n  };\n\n  const displayTodo = todoList.map(todo => {\n    //rename\n    return /*#__PURE__*/_jsxDEV(TaskItem, {\n      handleDelete: handleDelete,\n      todo: todo\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"task-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Complete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Due Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: displayTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateTask, {\n      handleCreateTask: handleCreateTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskList, \"hGGsNTuaOn7oyphipNa0xsYj1Yc=\");\n\n_c = TaskList;\nexport default TaskList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"sources":["/Users/garyflugel/Development/code/Projects/Phase-2/tasker/src/components/TaskList.js"],"names":["React","useEffect","useState","TaskItem","CreateTask","TaskList","todoList","setTodoList","fetch","then","res","json","data","handleDelete","e","console","log","filter","task","handleCreateTask","newTask","displayTodo","map","todo","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAK,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAvC,CADqB,CACwB;AAC7C;;AACAD,EAAAA,SAAS,CAAC,MAAK;AAAE;AACfO,IAAAA,KAAK,CAAC,4BAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAC2B;AAD3B,KAEGF,IAFH,CAEQG,IAAI,IAAIL,WAAW,CAACK,IAAD,CAF3B,EADa,CAGsB;AACpC,GAJQ,EAIN,EAJM,CAAT,CAHqB,CAOb;;AAER,QAAMC,YAAY,GAAIC,CAAD,IAAO;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,CAAvB;AACAP,IAAAA,WAAW,CAACD,QAAQ,CAACW,MAAT,CAAgBC,IAAI,IAAIA,IAAI,KAAKJ,CAAjC,CAAD,CAAX;AACD,GAHD;;AAKA,QAAMK,gBAAgB,GAAIC,OAAD,IAAa;AACpCL,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBI,OAArB;AACAb,IAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcc,OAAd,CAAD,CAAX;AACD,GAHD;;AAKA,QAAMC,WAAW,GAAGf,QAAQ,CAACgB,GAAT,CAAcC,IAAD,IAAS;AAAC;AACzC,wBAAO,QAAC,QAAD;AAAU,MAAA,YAAY,EAAGV,YAAzB;AAAqD,MAAA,IAAI,EAAEU;AAA3D,OAA4CA,IAAI,CAACC,EAAjD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFmB,CAApB;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE;AAAO,MAAA,SAAS,EAAC,YAAjB;AAAA,8BACE;AAAA,+BACE;AAAA,kCACE;AAAI,YAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAI,YAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAI,YAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAQE;AAAA,kBAEIH;AAFJ;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAeE,QAAC,UAAD;AAAY,MAAA,gBAAgB,EAAEF;AAA9B;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA1CD;;GAAMd,Q;;KAAAA,Q;AA4CN,eAAeA,QAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport TaskItem from './TaskItem';\nimport CreateTask from './CreateTask';\n\nconst TaskList = () => {\n  const[todoList, setTodoList] = useState([]); //whatever argument is in useState() is the initial state. Initial state only used on first render\n  //states variable is todoList and setter function is setTodoList. Whatever value is passed into setTodoList cahnges the todoList varible to it.\n  useEffect(() =>{ //useEffect adds ability to perform side effects. side effect is any other effect from an action we take.\n    fetch('http://localhost:3000/list')\n      .then(res => res.json()) //parsing from json to js object\n      .then(data => setTodoList(data)) //using the parsed data and setting the state of todoList\n  }, []); //dependancy is [], whatever is inside the useEffect is dependent on that. so if the rependency chances the useEffect function will run. So its a side effect of changing that dependency\n\n  const handleDelete = (e) => {\n    console.log(\"Deleted\", e)\n    setTodoList(todoList.filter(task => task !== e))\n  }\n\n  const handleCreateTask = (newTask) => {\n    console.log(\"Added\", newTask)\n    setTodoList([...todoList, newTask])\n  }\n\n  const displayTodo = todoList.map((todo) =>{//rename\n    return <TaskItem handleDelete= {handleDelete} key={todo.id} todo={todo}/>\n  })\n\n  return (\n    <div className='content'>\n      <table className=\"task-table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Complete</th>\n            <th scope=\"col\">Task</th>\n            <th scope=\"col\">Due Date</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            displayTodo\n          }\n        </tbody>\n      </table>\n      <CreateTask handleCreateTask={handleCreateTask}/> {/*props down to child component */}\n    </div>\n  )\n}\n\nexport default TaskList"]},"metadata":{},"sourceType":"module"}